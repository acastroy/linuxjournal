To compile the modules under Linux 2.0 run "make".

The "bluff" source file is the one printed in the kk article
The "bloom" module is the one in charge of executing TIFF images
The "fail" module uses emacs as a binary loader, and deserves some
explanation.

	FAIL
	----

This section describes the sample files that can be used with emacs.
Try ``insmod fail lisper="/usr/local/bin/emacs'' if your emacs doesn't
live in /usr/bin. After loading fail.o, try the following.

Try "./runme.el". The program is an "hello, emacs" source file, which
gets executed by emacs.  There's no need actually to have a trailing
.el in the file name: any name will work.

The program "runme", for example (without the trailing .el) is a
compiled lisp file.  Try "./runme".

To compile a lisp program, use the "lisp-compiler" executable file
in this directory. Its syntax is 

	./lisp-compiler <sourcefile> [<targetfile>]

The Makefile is instructed to use "lisp-compiler" to compile .el
files.  Try "make runme" to compile "runme.el". All the source files
are newer than the compiled ones, so you can play with make.

The last sample file is "lisper". If invoked with no arguments, it
executes Lisp code it finds in its standard input. If it receives
arguments, they are executed as Lisp statements. For example:

print "hi":
	./lisper '(message "hi")'

create "runme.elc":
	./lisper '(byte-compile-file "./runme.el")'

print current pid
	echo '(message "%d" (emacs-pid))' | ./lisper

Enjoy
/alessandro


