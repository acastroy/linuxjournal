------------------------------flex.main---------------------------
%{
/*  This routine is the matching flex routine to the yacc parser
  that handles vector/scalar operations.  Written February, 1994
  by D. A. Provins

	$Header: /home/provinsd/LAS/MOTIF_LAS/RCS/flex.main,v 1.8 1994/06/13 01:23:46 provinsd Exp $

*/
#include <stdlib.h>
#include "y.tab.h"

extern int DeBuG;	/* do_arithmetic sets if "las_debug" valued */

int numlines=1;
static int ivalue = 0;
float value = 0.0;

#undef  YY_INPUT
#define YY_INPUT(b,r,ms) (r = my_yyinput (b, ms))

#define min(a,b) (a<b?a:b)
%}

NEWLINE \n
EQUAL   \=
PLUS    \+
MINUS   \-
DIGIT   [0-9]
INT     {DIGIT}+
FLOAT   {DIGIT}*"."{DIGIT}*
DOUBLE  {DIGIT}*"."?{DIGIT}*([eEdD]({PLUS}|{MINUS})?{DIGIT}{DIGIT}*)?
VAR     [a-zA-Z][a-zA-Z0-9]*
DIVIDE  \/
TIMES   \*
RAISE   \^
LPAREN  \(
RPAREN  \)
WS      [ \t]
%%

{NEWLINE} numlines++; return -1;

{EQUAL}  {if (DeBuG) 
            printf ("Equal sign\n"); 
          return EQUAL;
         }

{VAR}    {if (DeBuG) 
             printf ("Variable <%s>\n", yytext); 
           return VARIABLE;
         }

{VAR}/{EQUAL} {if (DeBuG)
                 printf ("LHS of equation <%s>\n", yytext); 
               return LHS;
              }

{INT}    {if (DeBuG) 
            printf ("Int <%s>\n", yytext); 
          ivalue= atoi (yytext);
          value= ivalue;
          return NUMBER;
         }

{FLOAT}  {if (DeBuG) 
            printf ("Float <%s>\n", yytext); 
          value= atof (yytext);
          return NUMBER;
         }

{DOUBLE} {if (DeBuG) 
            printf ("Double <%s>\n", yytext);
          value= (float) atof (yytext);
          return NUMBER;
         }

{PLUS}  {if (DeBuG)
           printf ("Sign <%s>\n", yytext); 
         return PLUS;
        }

{MINUS} {if (DeBuG)
           printf ("Sign <%s>\n", yytext); 
         return MINUS;
        }

{TIMES} {if (DeBuG)
           printf ("Times <%s>\n", yytext); 
         return TIMES;
        }

{DIVIDE}  {if (DeBuG)
             printf ("Divide <%s>\n", yytext); 
           return DIVIDE;
          }

{RAISE} {if (DeBuG)
           printf ("Raise <%s>\n", yytext); 
         return RAISE;
        }

{LPAREN} {if (DeBuG)
            printf ("Left paren\n"); 
          return LPAREN;
         }

{RPAREN} {if (DeBuG)
            printf ("Right paren\n"); 
          return RPAREN;
         }

{WS}      /* eat whitespace */
%%
/***************************************************************
    This routine is replaces the Flex "internal" YY_INPUT macro
    that it uses to get input
****************************************************************/
int
my_yyinput (
#ifdef _NO_PROTO
buf, max_size)
char * buf;
int max_size;
#else
char * buf, int max_size)
#endif

{
/*  Elsewhere, "my_arithmetic_string" must be assigned a value.
    At that time, "current_pointer" should point to the first
    character in "my_arithmetic_string", and
    "end_of_string_pointer" should be set to the trailing NULL
*/

  extern char * my_arithmetic_string,
              * current_pointer,
              * end_of_string_pointer;

  int n = min (max_size, end_of_string_pointer - current_pointer);

  if (n > 0) {
    memcpy (buf, current_pointer, n);
    current_pointer += n;
  }
  return n;
}
restart_lex ()
{
  *yy_c_buf_p = (YY_CHAR *) 0;
  yy_init = 1;		/* whether we need to initialize */
  yy_start = 0;		/* start state number */
}
