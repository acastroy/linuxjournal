The setup for the build environment takes a few steps.  First of all, you
want to make sure you have the JDK from blackdown.org.  It can be obtained
by visiting http://www.blackdown.org/java-linux.html, and choosing to
"Download the JDK for Linux."  Follow the installation instructions in
Blackdown's documentation.  You want to make sure that you get the jdk
1.1.7, and not 1.2.

Installing VisiBroker for Java on Linux is a little more complicated.  The
problem is that VisiBroker has an executable called "osagent" that must be
running in order to fully operate the ORB.  Unfortunately, there is as of
yet no "official" Linux port of VisiBroker for Java, and thus no ELF binary
of osagent that runs on Linux natively.  If you'd like to let the folks at
Inprise know how nice it would be to have a pure Linux port of their
product, Inprise suggests you send email to the following email address:
pjonusaitis@inprise.com.  For now, however, you must run the osagent under
one of their supported platforms, which includes Windows, Solaris, HPUX, AIX,
Digital Unix and IRIX, but not Linux.  Therefore, you can do all your
VisiBroker for Java development on Linux and run all your CORBA
applications on linux machines, but you have to run osagent on a supported
platform.

This leads us to several options, one of which we'll describe here
here.  Among your options are:

1.   Use a network, with a minimum of 1 Linux Box (any flavor) and
     one other machine that is running either Windows (any flavor),
     Solaris, HPUX, AIX, or IRIX. All your development and execution will
     be done on the linux box, but the "other" machine will run osagent. 
2.   Use Wine for Linux to run osagent directly on the Linux box.
     See http://www.winehq.com/ for more information on downloading, 
     installation, and setup.  This option would not require a network, but
     would require obtaining and configuring Wine.
3.   Use vmware, and set up a virtual machine running Windows on your Linux
     box, and run osagent within the Windows virtual machine.  Check them
     out at http://www.vmware.com/.  This option would not require a physical
     network (it utilizes a virtual network address in the VM), but would
     require installing vmware and configuring the VM and then installing a
     Windows operating system into the VM, such as Windows 95/98 or NT.

For our discussion here, we have chosen the first option.  We will use a
small network consisting simply of a single Linux box and a single Windows
95 box (a typical small home network).  We will install VisiBroker for Java
on the Windows 95 machine, and then "port" it over (mainly the .jar files)
to the Linux box.  If you are using another box with other than Windows,
just substitute that OS for Windows in the instructions below.  

First, make sure you have installed the JDK from Blackdown, as mentioned
above.  Next, download the 60-day trial version of VisiBroker for Java for
Windows from Inprise, by going to
http://www.inprise.com/visibroker/download/, and choosing to download
VisiBroker for Java for Windows (or whatever your second "official" box is
going to be).  As of the time of this writing, version 3.4 is available for
Windows.  Install the jdk according to the instructions that accompany it.
(Mark the page, becuase you may need to return to it and download the
Solaris version as well, to get the vbroker/bin directory--see below).

Now, you must install VisiBroker for Java onto the Windows box.  You must
do this for two reasons.  One, we're going to be running osagent on the
Windows box, since it's an executable not available for Linux.  Secondly,
the official installation process stamps the VisiBroker jar files with a
license code that is necessary for the proper operation of the ORB.  If
these files are not installed properly, they will not run.  Therefore,
installation of VisiBroker onto a supported machine is a necessity, so that
the jar files can be properly stamped.  So, install VisiBroker into a
directory (perhaps c:\vbroker) on the Windows machine.  

Then, copy the files from c:\vbroker to your linux box (say, under
/opt/vbroker).  You can do this in several different ways.  Perhaps the
easiest is to use Samba on the linux box to server up SMB drives for the
Windows box.  Another way is to use nfs to do the transfer (either running
an nfs client on the Windows box or an nfs server on the Windows box).  A
third way is to zip up the entire vbroker directory structure, and ftp that
tarball over to the linux box, and untar it into /opt/vbroker.  However you
choose to do it, you want to get the following directories over onto the
linux box at a minimum (some of these are not strictly necessary, but they
are nice to have):

c:\vbroker\lib		    ===>	/opt/vbroker/lib
c:\vbroker\adm		    ===>	/opt/vbroker/adm
c:\vbroker\docs		    ===>	/opt/vbroker/docs
c:\vbroker\idl		    ===>	/opt/vbroker/idl
c:\vbroker\java_examples    ===>	/opt/vbroker/java_examples

Your /opt/vbroker/lib will contain the license-stamped jar files for the
VisiBroker ORB.

Now, you still need an /opt/vbroker/bin directory.  This is a little
problematic, because you can't simply copy over the Windows c:\vbroker\bin
directory, because it contains windows binaries, which will do you no good.
So, your best bet is to download (yes, again) the Solaris port of the
VisiBroker for Java 3.4, and extract it's /vbroker/bin directory from the
tarball.  The way to do that is as follows:

1.  Download the Solaris VisiBroker 3.4 file called vbj34_sol.tar, from the
Inprise web site, where you downloaded the Windows version earlier.
2.	 Create a directory called vbj34.sol, and change to that directory.
3.  Untar the tarball: tar ../vbj34_sol.tar
4.  Uncompress the files ending with .Z with this command:
	uncompress *.Z
5.	 Then, extract three of the files with the following commands:
	tar xvf vbcrdev.tar
	tar xvf vbcrrun.tar
	tar xvf vbgkrun.tar
6.  Now, on you Linux machine, create a new bin directory under your
/opt/vbroker directory where you copied all your files from the Windows
installation.
7.  Then, copy the contents of the vbj34.sol/bin directory to your target
vbroker/bin directory, something like:
	cp vbj34.sol/bin/* /opt/vbroker/bin
8.  After doing this, you should have the following files in your
/opt/vbroker/bin directory:
gatekeeper   idl2java     java2iiop    oadutil      printIOR
vbj_convert
gkconfig     irep         locserv      osagent      vbdebug      vbjc
idl2ir       java2idl     oadj         osfind       vbj          vbver

The only files among these that you will need to use for our example are
idl2java, vbjc, and vbj.  Read the README.bin.dir file, that's our
description file for the ported bin directory.  Note that some of these
files, such as osagent and osfind, are Solaris binaries, so don't try and
run them.

Now, you should have the JDK1.1.7 installed, say in /usr/local/jdk117_v1a.
You should also have copied over the VisiBroker directories listed above,
say into /opt/vbroker.  At this point, you want to make sure that (based on
the above sample directories) you have the following setup:

Your PATH should include the following:

/usr/local/jdk117_v1a/bin
/opt/vbroker/bin

You can verify the above by typing the commands "which javac" and "which
vbj".  The javac should resolve to your jdk bin directory, and your vbj
should resolve to your vbroker bin directory.

Your CLASSPATH should include the following:

/usr/local/jdk117_v1a/lib/classes.zip
/opt/vbroker/lib/swingall.jar
/opt/vbroker/lib/vbjtools.jar
/opt/vbroker/lib/vbjapp.jar
/opt/vbroker/lib/vbjorb.jar
/opt/vbroker/lib/vbjcosnm.jar
/opt/vbroker/lib/vbjcosev.jar

Once you have the above set up, building the source is quite simple.  Just
download it and untar it into a new directory, and type "make".  That will
build the source.

For instructions on how to run the application once built, see the
README.run file.







