#!/bin/sh

# Customary tcl hackery... \
exec wish "$0" "$@"

#
# PPPui: X-based front end to the PPP utilities, implemented as a wish
#        script.
#
# Usage: $0 [-small title] ppp_start_cmd ppp_stop_cmd \
#	    [ppp_device (defaults to ppp0)]
#
# By Nathan Meyers, nmeyers@teleport.com.
# $Date: 1997/07/12 15:34:11 $
#
# The script starts up the PPP connection, then runs a visible timer
# until the connection is closed.  A button on the GUI closes the
# connection.  Note that the "ppp_device" arg is not used for startup
# or shutdown, but rather to ascertain when you've actually gone online --
# by scanning for its presence in the /proc/net/route file -- in order to
# start the clock.
#
# One important modification required to PPP scripts: the ppp_start_cmd
# must not run in the background.  This script considers the connection
# dead when that command terminates, so you need to add "-detach" to the
# options passed to pppd in the startup script.
#
# The PPPui GUI includes a console that captures any output generated by
# the startup and shutdown commands.  It also captures any output written
# into a named pipe whose name is advertised in the $PPPUI_PIPE environment
# variable.  So any downstream descendant (such as, for example, the dialer
# script) has a direct path to the console for posting messages.
#
# Dependencies: wish4.2, The X Window System, /bin/sh, /proc file system
# 

proc Usage {} {
    global argv0
    puts -nonewline stderr "Usage: $argv0 \[-small title\] ppp_start_cmd "
    puts stderr "ppp_stop_cmd \[ppp_device\]"
    puts stderr "\n       ppp_device defaults to ppp0"
    exit 1
}

proc PPPQuit {} {
    # This procedure calls the PPP shutdown script.  It's called in response
    # to the Quit button or the WM_DELETE_WINDOW event
    global stop_cmd
    global shell_cmd
    catch {
        # Launch the shutdown command, but don't quit.  We continue waiting
        # until the startup command terminates.  If the shutdown command
        # cannot figure out how to stop the startup command (as, for
        # example, before the login completes), that's not our problem
        # to solve.
        set fromstop [ open "| [ concat $shell_cmd [ list $stop_cmd ] ] \
    		       2>@ stdout" r ]
        # Capture its output
        fconfigure $fromstop -blocking 0
        fileevent $fromstop readable [ list HandleStopOutput $fromstop ]
    }
}

proc ToConsole { txt } {
    .console.term configure -state normal
    .console.term insert end $txt
    .console.term see end
    .console.term configure -state disabled
}

proc HandleStartOutput { pipe } {
    global pipename
    # This procedure handles output from the PPP startup script.  We don't
    # expect any output, other than EOF when the script is done -- which
    # is what we're really interested in.  If anything else comes in,
    # we'll send it to the console
    if [ eof $pipe ] {
    	exec /bin/rm -f $pipename
    	exit 0
    }
    set buf [ read $pipe 1024 ]
    ToConsole $buf
}

proc HandleStopOutput { pipe } {
    # This procedure handles output from the PPP shutdown script and
    # sends it to the console.
    if [ eof $pipe ] {
    	catch { close $pipe }
    	return
    }
    set buf [ read $pipe 1024 ]
    ToConsole $buf
}

proc HandleFIFOInput { pipe pipename } {
    # This procedure handles input sent to us over the named FIFO
    # and sends it to the console.
    if [ eof $pipe ] {
    	catch {
    	    # The FIFO was closed.  Reopen it in case someone else wants
    	    # to talk
    	    close $pipe
	    set fifo [ open $pipename { RDONLY NONBLOCK } ]
	    fconfigure $fifo -blocking 0
	    fileevent $fifo readable [ list HandleFIFOInput $fifo $pipename ]
        }
    	return
    }
    set buf [ read $pipe 1024 ]
    ToConsole $buf
}

proc PostTime {} {
    global starttime
    global makesmall
    # This procedure updates the display of how long we've been connected.
    # There's danger of an occasional skip because we can only read the
    # time to the nearest second (unless we mess with "clicks"), but that's
    # hardly a critical problem.
    set currtime [ clock seconds ]
    set timestring [ clock format [ expr $currtime - $starttime ] \
    		     -format %T -gmt true ]
    # Tell everyone
    if { $makesmall } {
        .controls.clock configure -text "$timestring"
    } {
        wm title . "PPP: $timestring"
        .controls.clock configure -text "PPP: $timestring"
    }
    after 1000 PostTime
}

proc CheckPPPDevice {} {
    global device
    global starttime
    global makesmall
    global smalltitle
    # This procedure checks every .5 seconds whether a route has been
    # added for the ppp device.  Once it appears, we turn on the stopwatch
    # for the duration
    set routes [ open /proc/net/route r ]
    # Toss the header line
    gets $routes
    # Scan for a line beginning with our device name
    set done 0
    while { [ gets $routes line ] >= 0  && !$done } {
	if { [ string first $device $line ] == 0 } {
	    set starttime [ clock seconds ]
	    PostTime
	    set done 1
	    # Change our geometry if requested
	    if { $makesmall } {
	        pack forget .console
	        pack .controls.clock -side top
	        pack .controls.quit -side bottom
		wm title . $smalltitle
	    }
	}
    }
    close $routes
    # If we didn't find our route, check again in half a second
    if { !$done } { after 500 CheckPPPDevice }
}

# Process command line
set nargs [ llength $argv ]
set makesmall 0
if { $nargs > 1 && [ string compare [ lindex $argv 0 ] "-small" ] == 0 } {
    set makesmall 1
    set smalltitle [ lindex $argv 1 ]
    set argv [ lreplace $argv 0 1 ]
    set nargs [ expr $nargs - 2 ]
}
if { $nargs != 2 && $nargs != 3 } { Usage }

# Process our command-line args
set start_cmd [ lindex $argv 0 ]
set stop_cmd [ lindex $argv 1 ]
if { $nargs == 2 } { set device ppp0 } { set device [ lindex $argv 2 ] }

# We'll actually be scanning for "device-name" followed by a tab
append device "\t"

# Set the shell command to interpret the startup and shutdown commands.
# We use a shell so the user can assume common shell syntax for a
# command and not the odd syntax of tcl's exec command
set shell_cmd "/bin/sh -c"

# Simple GUI: label...
frame .controls
label .controls.clock -text "PPP Not Connected"
pack .controls.clock -side left
# ... quit button
button .controls.quit -text "Quit" -pady 2 -command PPPQuit
pack .controls.quit -side right
pack .controls -fill x
# ... and scrolled text console ...
frame .console
text .console.term -setgrid true -state disabled \
     -yscrollcommand { .console.scroll set }
scrollbar .console.scroll -command { .console.term yview }
pack .console.scroll -side right -fill y
pack .console.term -side left -fill both -expand true
pack .console -side top -fill both -expand true

if [ catch {
    # Create a named pipe, in case anyone wants to send us console
    # output
    set pipename "/tmp/PPP"
    append pipename [ pid ]
    exec /bin/rm -rf $pipename
    exec /bin/mkfifo $pipename
    set fifo [ open $pipename { RDONLY NONBLOCK } ]
    fconfigure $fifo -blocking 0
    fileevent $fifo readable [ list HandleFIFOInput $fifo $pipename ]
    # Advertise the pipe
    set env(PPPUI_PIPE) $pipename

    # Run PPP startup script in a process pipeline
    set fromstart [ open "| [ concat $shell_cmd [ list $start_cmd ] ] \
    		    2>@ stdout" r ]
    # Capture its output
    fconfigure $fromstart -blocking 0
    fileevent $fromstart readable [ list HandleStartOutput $fromstart ]

    # Handle the WM_DELETE_WINDOW event
    wm protocol . WM_DELETE_WINDOW PPPQuit

    # Check whether we're on line yet
    CheckPPPDevice

    # Hang around until we're done
    tkwait window .
} result ] {
    puts stderr $result
}

exit
