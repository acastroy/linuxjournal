README for Ackermann Function Listing.

Just for fun, I will give one example that also uses a few of the advanced
commands--it computes the Ackermann function:

             +- n + 1 if m = 0
             |
ack(m, n) = -+ ack(m - 1, 1) if m <> 0 and n = 0
             |
             +- ack(m - 1, ack(m, n - 1)) if m <> 0 and n <> 0

This function is highly recursive and can be proved to outgrow any primitive
recursive function. If m >= 4, the values of ack(m, n) grow to enormous
values. For example:

ack(2, 0) = ack(1, 1)
          = ack(0, ack(1, 0))
          = ack(0, ack(0, 1))
          = ack(0, 2)
          = 3

A large derivation is needed by ack(2,3) = 7. The Ackermann function can be
computed using the sed script also contained in this archive file. Basically,
it works just like a smart Turing machine.

First we try to rewrite a string like ack(2,3) using the definition of the
Ackermann function. When we need to do a computation with the numbers,
we place special markers around the numbers. If we want to decrement,
we surround it by a "#" and a "-"; in the case of an increment, we use
"#" and a "+". Note that we can remember the numbers by using "\1" and "\2".

Next, we perform the decrement. First, we try to decrement all trailing
zeros to nines. Here the test commands comes into place: we will keep on
replacing "0-" by "-9" as long as we can. Note that the "-" marker operates
just like a borrow. After we come to a digit larger than 0, we decrement
one more time. We remove the borrow by replacing the "-" by a "=".

Increments are done similarly: first replace all trailing nines into zeroes
and propagate the carry "+". After we come to a digit less than 9, we do
one more step then we terminate the carry by replacing it with a "=". In the
case where the number is all nines, it should be prefixed by the number 1.

The next step is to remove markers. We will first transfer the "=" over
the remining digits until it borders the "#" marker at the beginning of
the digit. Then we will remove "#=" completely, after we test whether we
can indeed remove it. (Well, this part could have been combined, but I
kept it simple.)

When we removed it, it means that we were able to introduce the markers
in the first place. In other words we had rewritten the expression by the
definition. Only when the expression is a number, do we fail to rewrite
the expression; but in that case, we are finished.

Just run this script with ack(2,3) as its input and watch the progress of
the script. Looks funny, right? Well, now let your xterm use font Unreadable
(ctrl-right_button) and make it as large as your root window. Now run the
script with ack(3,3) as input. Now that is impressive!
