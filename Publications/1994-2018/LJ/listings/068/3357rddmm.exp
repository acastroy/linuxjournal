 1  #!/usr/bin/expect5.19 --
    
 2  # rddmm.exp - D. Fox - 12/98
 3  # Read Micronta 22-182 (Radio Shack) digital multimeter, interpret voltage
 4  # as degrees fahrenheit / 100, record log file. This is run by cron every
 5  # minute to keep the meter alive. Timesperhour defines how often the log is
 6  # updated
    
 7  set env(PATH) "/bin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin"
 8  set env(TERM) "vt100"
    
 9  set port ttyS0
10  set logfile /var/log/temps.log
11  set hostapp "[exec hostname] rddmm:"
12  set scalefactor 100
13  set units "Degrees F"
14  set timesperhour 4
    
15  set timeout 5
    
16  log_user 0
    
17  stty raw < /dev/$port
18  stty speed 1200 cs7 cstopb -echo clocal < /dev/$port
    
19  spawn -open [open /dev/$port w+]
20  exec clrrts $port
    
21  send "D\r"
    
22  expect {
23    timeout {
24      set lfile [open $logfile a]
25      puts $lfile "[exec date "+%b %d %H:%M:%S"] $hostapp dmm read timed out."
26      close $lfile
27      exit
28    }
    
29    "\r"
30  }
    
31  set rawoutput $expect_out(buffer)
32  #puts "$rawoutput"
33  set temp [string range $rawoutput 2 7]
34  #puts "$temp"
35  set value [expr $temp * $scalefactor]
36  #puts "$value"
    
37  if { [expr ([exec date "+%-M"] % (60/$timesperhour))] == 0 } {
38    set lfile [open $logfile a]
39    puts $lfile "[exec date "+%b %d %H:%M:%S"] $hostapp $value $units"
40    close $lfile
41  }
    
42  close

@b:Line 1 shows that Expect follows the #! Convention to launch expect
scripts from the command if the execute bits are set. I<\#146>m using Expect
5.19 to work around the cron issue.

Lines 6 and 7 set the PATH and TERM environment variables, some
applications don<\#146>t run very well unless they have TERM set.

Lines 9 through 14 set up the variables used in the rest of the script,
most are self-explanatory. In line 11 hostapp will end up containing
the hostname and rddmm: for use in writing to the log file. Lines 12
and 13 define the scale factor for the voltage to degrees conversion
and the units. In line 14, timesperhour, determines how many times per
hour the log file gets updated. It<\#146>s assumed that cron will be running
the script each minute, so numbers from 1 to 60 make sense.

Line 15 sets the number of seconds Expect will wait for a response
before timing out. I set it to 5 seconds so I didn<\#146>t have to wait so
long while I was debugging.

Line 16 suppresses all output to stdout and stderr. This lets rddmm.exp
run silently and only update the log file. Without this line, cron
would mail the owner of the script the output, which would normally go
to the screen, each minute.

Lines 17 and 18 put the serial port into raw mode, and set the
communication parameters.

Line 19 uses the spawn and open commands to open the serial port. The
w+ argument opens it for read and write.

Line 20 executes the clrrts utility I wrote to drive the RTS line back
low after the port is opened. Without RTS low, the meter<\#146>s TXD line
does not work properly.

Line 21 sends the <\#147>D<\#148> command to the meter, followed by a return
character. This triggers an output message.

Lines 22 through 30 are where the output from the meter is handled. A
Lines 22 through 30 are where the output from the meter is handled. A
single <\#147>expect<\#148> command can monitor the incoming character steam
for
many conditions, including timeout, simultaneously. It<\#146>s handy to do
all the error handling first, and let the success condition be the last
thing tested. That way when a success match occurs the script falls
through to line 31 as the <\#147>action<\#148> for success. In this script
lines 24
through 27 are the action for a timeout condition. The action
statements are enclosed in braces, and write the timeout error message
to the log. On line 25 the UNIX date command is executed with a format
which causes it to return the date and time in a format like Dec 31
12:00:00 for the log entry. So, in this case, the <\#147>expect<\#148>
statement
either sees the \r at the end of the response, or times out.

Lines 31 through 36 form the actual value of the temperature. The puts
statements on lines 32, 34, and 36 are debugging aids I commented out
once I got it all working. Line 31 reads the meter<\#146>s response from
Expect<\#146>s buffer. Line 33 extracts the characters from the string that
are the voltage, strings start with position 0. Line 35 establishes the
final value by multiplying the temporary value by the scale factor, in
this case 100.

Lines 37 through 41 take care of writing the log file. In line 37 the
date format only returns the minutes. The % sign is the mod operator in
Expect. If the minutes mod 60/timesperhour equal 0, the <\#147>if<\#148>
statement
is true and lines 38-40 are executed, writing the log entry. Once
again, braces are used to define the block. Both in line 24 and 38, the
final <\#147>a<\#148> in the open statement opens the log for append. The
script is
run once each minute by cron to keep the meter from automatically
shutting off, but the log is only updated timesperhour.

Finally, line 42 closes the serial port and we are done till the next
minute.

