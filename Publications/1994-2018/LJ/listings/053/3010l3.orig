vtkRenderWindow renwin
vtkRenderer ren
vtkRenderWindowInteractor iren
vtkPolyData mesh
vtkFloatPoints points
vtkCellArray cells
vtkFloatVectors vector
vtkHedgeHog hhog	
vtkFloatScalars field
 

points InsertPoint 0 0 0 0

for {set i 1} {$i <= $nverts} {incr i} {
	points InsertPoint $i $xk($i) $yk($i) $zk($i)
}

for {set i 1} {$i <= $nverts} {incr i} {
	set vel($i) [expr hypot($uk($i),hypot($vk($i),$wk($i)))]
}

set command "field InsertScalar \$i \$$type\(\$i\)"

for {set i 1} {$i <= $nverts} {incr i} {
	eval $command
}
[mesh GetPointData] SetScalars field
set srange [[[mesh GetPointData] GetScalars] GetRange]
puts stdout "range of $type: $srange"
field Delete

set vmin  100000
set vmax -100000   
  
for {set i [expr $ifirst]} {$i <= $nverts} {incr i} {
	vector InsertVector $i $uk($i) $vk($i) $wk($i)
	set v [expr hypot($uk($i),hypot($vk($i),$wk($i)))]
	if {$v < $vmin} {
		set vmin $v
	}
	if {$v > $vmax} {
		set vmax $v
	}         


(max and min calculations snipped)
	if {$fk($i) > 0} {
#	    puts stdout "$i i1 i3 i8: $i1tab($i) $i3tab($i) $i8tab($i)"
	    set p1 $i1tab($i)
	    set p2 $i3tab($i)
	    set p3 $i8tab($i)
	    cells InsertNextCell 2
	    cells InsertCellPoint $i
	    cells InsertCellPoint $p1
	    cells InsertNextCell 2
	    cells InsertCellPoint $i
	    cells InsertCellPoint $p2
	    cells InsertNextCell 2
	    cells InsertCellPoint $i
	    cells InsertCellPoint $p3
	}  
}
mesh SetPoints points
mesh SetLines cells

[mesh GetPointData] SetVectors vector
cells Delete

# now, make a polydata set which puts panels on on all solid surfaces:
vtkPolyData panels
vtkCellArray panelcells
    #use the "points" from above"
set i1tab(0) 0
set i3tab(0) 0
set i8tab(0) 0

for {set i $ifirst} {$i <= $nverts} {incr i} {
#	puts "finding panels for $i"
	set ibcl 0
	set ibcb 0
	set ibcf 0
	set p1 $i1tab($i)
	set p2 $i3tab($p1)
	set p3 $i3tab($i)
	set p5 $i8tab($p1)
	# don't need p6 because it is a cell diagonal... never paneled from i4
	set p7 $i8tab($p3)
	set p8 $i8tab($i)
	if {$bcl($i) == 20} {
	    set ibcl 4
	}
	if {$bcb($i) == 20} {
	    set ibcb 2
	}
	if {$bcf($i) == 20} {
	    set ibcf 1

	}
	set sum [expr $ibcl + $ibcb + $ibcf]
	switch -exact $sum {
	    
	    4 {
		panelcells InsertNextCell 4
		panelcells InsertCellPoint $i
		panelcells InsertCellPoint $p3
		panelcells InsertCellPoint $p8
		panelcells InsertCellPoint $p7
	    }
	    2 {
		panelcells InsertNextCell 4
		panelcells InsertCellPoint $i
		panelcells InsertCellPoint $p1
		panelcells InsertCellPoint $p3
		panelcells InsertCellPoint $p2
		
	    }
	    1 {
		panelcells InsertNextCell 4
		panelcells InsertCellPoint $i
		panelcells InsertCellPoint $p1
		panelcells InsertCellPoint $p8
		panelcells InsertCellPoint $p5
		
	    }
	    3 {
		panelcells InsertNextCell 6
		panelcells InsertCellPoint $p2
		panelcells InsertCellPoint $p3
		panelcells InsertCellPoint $p1
		panelcells InsertCellPoint $i
		panelcells InsertCellPoint $p5
		panelcells InsertCellPoint $p8

	    }
	    5 {
		panelcells InsertNextCell 6
		panelcells InsertCellPoint $p7
		panelcells InsertCellPoint $p3
		panelcells InsertCellPoint $p8
		panelcells InsertCellPoint $i
		panelcells InsertCellPoint $p5
		panelcells InsertCellPoint $p1
	    }
	    6 {
		panelcells InsertNextCell 6
		panelcells InsertCellPoint $p7
		panelcells InsertCellPoint $p8
		panelcells InsertCellPoint $p3
		panelcells InsertCellPoint $i
		panelcells InsertCellPoint $p2
		panelcells InsertCellPoint $p1
	    }
	    7 {
		panelcells InsertNextCell 6
		panelcells InsertCellPoint $p7
		panelcells InsertCellPoint $p3
		panelcells InsertCellPoint $p8
		panelcells InsertCellPoint $i
		panelcells InsertCellPoint $p5
		panelcells InsertCellPoint $p1

		panelcells InsertNextCell 4
		panelcells InsertCellPoint $i
		panelcells InsertCellPoint $p1
		panelcells InsertCellPoint $p3
		panelcells InsertCellPoint $p2
		
	    }
	}
}

panels SetPoints points
panels SetStrips panelcells

points Delete
panelcells Delete


vtkDataSetMapper mapper
vtkPolyDataMapper panelmapper
   
panelmapper SetInput panels
vtkActor panelactor
panelactor SetMapper panelmapper
 
set panelprop [panelactor GetProperty]
$panelprop  SetColor .7 .7 .7
$panelprop SetOpacity .5
   
    
vector Delete
hhog SetInput mesh
mapper SetInput [hhog GetOutput]
	
ren AddActor meshactor
ren AddActor panelactor
[meshactor GetProperty] SetRepresentationToSurface

renwin AddRenderer ren
iren SetRenderWindow renwin
iren Initialize
